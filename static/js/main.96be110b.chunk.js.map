{"version":3,"sources":["components/Users/User/user.module.css","components/Friends/FriendsContainer.tsx","components/Friends/Friends.tsx","components/Navbar/Navbar.tsx","assets/images/200w.webp","components/commons/SpinnerLoader/SpinnerLoader.tsx","components/Profile/ProfileStatus/ProfileStatusHooks.tsx","components/Profile/Contacts/Contacts.tsx","components/Profile/ProfileData/ProfileData.tsx","components/Profile/ProfileData/ProfileFormData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","api/api.ts","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/commons/TextareaForm/TextareaForm.tsx","components/Profile/MyPosts/MyPosts.tsx","hoc/withAuthRedirectHOC.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/selectors/profile-selectors.ts","components/Profile/ProfileContainer.tsx","redux/dialogs-reducer.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","redux/users-reducer.ts","components/commons/Paginator/Paginator.tsx","assets/images/avatar_girl.png","components/Users/User/User.tsx","components/Users/Users.tsx","redux/selectors/users-selectors.ts","components/Users/UsersContainer.tsx","redux/authorization-reducer.ts","components/Login/Login.tsx","components/commons/NotFound/NotFound.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.ts","redux/sidebar-reducer.tsx","redux/redux-store.ts","index.tsx","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/commons/Paginator/Paginator.module.css"],"names":["module","exports","FriendsContainer","connect","state","friends","sidebarContent","props","avaBoy","width","src","alt","friendsItems","map","fr","name","id","className","Navbar","style","nav","navContainer","allItems","item","to","activeClassName","active","friendsNav","SpinnerLoader","LoadingSpinner","ProfileStatusHooks","useState","status","setStatus","editMode","setEditMode","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","onDoubleClick","Contacts","contactTitle","contactValue","ProfileData","isOwner","onClick","profileUser","lookingForAJob","Object","keys","contacts","key","ProfileDataForm","formik","useFormik","initialValues","lookingForJob","onSubmit","values","alert","JSON","stringify","handleSubmit","type","htmlFor","handleChange","ProfileInfo","React","memo","description","fullName","photos","small","editmode","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","delete","post","console","warn","profileAPI","getProfile","getStatus","put","savePhoto","file","formData","FormData","append","authorizationAPI","email","password","rememberMe","initialState","myPostsData","v1","likes","lookingForAJobDescription","github","vk","facebook","instagram","twitter","website","youtube","mainLink","large","setStatusAC","getContactsAC","savePhotoAC","Post","content","message","TextareaForm","textarea","validate","log","length","errors","clickCallback","handleBlur","color","MyPosts","myPostsDataMap","profile","el","reverse","posts","newPost","mapStateToProps","isAuth","authorization","isAuthorized","withAuthRedirectHOC","Component","othersProps","MyPostsContainer","compose","dispatch","text","Profile","getProfileUserSelector","getStatusSelector","getMyUserIdSelector","getIsAuthorizedSelector","getContactsSelector","ProfileContainer","this","match","params","myUserId","history","push","getProfileThunkCreator","getStatusThunkCreator","getContactsThunkCreator","refreshProfile","prevProps","prevState","snapshot","savePhotoTC","updateStatusThunkCreator","a","resultCode","withRouter","NEW_DIALOGS_POST","dialogsData","sex","messageData","DialogItem","path","avaGirl","dialog","Message","DialogsContainer","dialogs","addDialog","dialogItemsMap","messageMap","dialogs_items","all_messages","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SPINNER_LOADER_FETCHING","FOLLOWING_IN_PROGRESS","initialStateUsers","users","totalUsersCount","isFetching","followingInProgress","setNewUsersAC","setCurrentPageAC","page","spinnerLoaderFetchingAC","followingInProgressAC","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","portionSize","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cssStyles","paginatorWrapper","margin","filter","p","pageNum","event","onChangePage","selectedPage","border","User","user","avatarDefault","styles","usersAvatars","followed","disabled","some","unfollowUsersThunk","followUsersThunk","Users","getUsersSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","getUsersThunk","bind","items","totalCount","changePageThunk","InitialAuthState","login","serverError","setAuthUserData","payload","isAuthorizedUserTC","Login","useSelector","useDispatch","validationSchema","Yup","required","min","max","messages","error","height","marginBottom","NotFound","Header","stylesModule","headerContainer","headerBody","logo","loginBlock","HeaderContainer","initialAppState","initialized","App","initializeAppTC","render","exact","from","app","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96be110b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersAvatars\":\"user_usersAvatars__3ElzM\"};","import {Friends} from \"./Friends\";\r\nimport {connect} from \"react-redux\";\r\nimport {FriendsType} from \"../../redux/sidebar-reducer\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\n\r\nexport type mapStateToPropsFriendsType = {\r\n    friends: Array<FriendsType>\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        friends: state.sidebarContent.friends\r\n    }\r\n}\r\n\r\n\r\nexport const FriendsContainer = connect(mapStateToProps)(Friends)","import React from \"react\";\r\nimport {mapStateToPropsFriendsType} from \"./FriendsContainer\";\r\n\r\n\r\n\r\n// type RootType = {\r\n//     friends: Array<FriendsType>\r\n// }\r\n\r\nexport const Friends= (props: mapStateToPropsFriendsType) => {\r\n    /*const ava =() =>{\r\n        if (props === \"boy\") {\r\n            return avaBoy\r\n        }\r\n        if (props.sex === \"girl\") {\r\n            return avaGirl\r\n        }\r\n    }*/\r\n    const avaBoy = <img width={\"25px\"} src=\"https://static.vecteezy.com/system/resources/thumbnails/002/002/427/small/man-avatar-character-isolated-icon-free-vector.jpg\" alt=\"boy\"/>\r\n    // const avaGirl = <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTea6mpJZODj13Lvutndl6PgvULvVC3tPcreM4doidd7vHImnTOeK0HkfZIrFGeHuN_aJc&usqp=CAU\" alt=\"girl\"/>\r\n\r\n    let friendsItems = props.friends.map(fr => <div key={fr.id}>{avaBoy}{fr.name}</div>)\r\n\r\n    return (\r\n        <div className={\"friends_body\"}>\r\n            {friendsItems}\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React from \"react\";\r\nimport style from \"./Navbar.module.css\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport {FriendsContainer} from \"../Friends/FriendsContainer\";\r\n\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <div className={style.nav}>\r\n\r\n            <div className={style.navContainer}>\r\n\r\n                <div className={style.allItems}>\r\n\r\n                    <div className={style.item}>\r\n                        <NavLink to=\"/profile\" activeClassName={style.active}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={style.item}>\r\n                        <NavLink to=\"/dialogs\" activeClassName={style.active}>Messages</NavLink>\r\n                    </div>\r\n                    {/*<div className={style.item}>*/}\r\n                    {/*    <NavLink to=\"/news\" activeClassName={style.active}>News</NavLink>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div className={style.item}>*/}\r\n                    {/*    <NavLink to=\"/music\" activeClassName={style.active}>Music</NavLink>*/}\r\n                    {/*</div>*/}\r\n                    {/*<div className={style.item}>*/}\r\n                    {/*    <NavLink to=\"/settings\" activeClassName={style.active}>Settings</NavLink>*/}\r\n                    {/*</div>*/}\r\n                    <div className={style.item}>\r\n                        <NavLink to=\"/users\" activeClassName={style.active}>Users</NavLink>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={style.friendsNav}>\r\n                    <div>Friends</div>\r\n                    <FriendsContainer/>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/200w.4e03e26f.webp\";","import LoadingSpinner from \"../../../assets/images/200w.webp\";\r\nimport React from \"react\";\r\n\r\nexport const SpinnerLoader = (props: any) => {\r\n    return (\r\n        <div className={\"loadingSpinner\"}>\r\n             <img src={LoadingSpinner}/>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [status, setStatus] = useState(props.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n   const onEditMode = () => {\r\n       setEditMode(true)\r\n    }\r\n   const offEditMode = () => {\r\n      setEditMode(false)\r\n       props.updateStatus(status)\r\n    }\r\n   const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n       setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <>\r\n                {editMode === true ?\r\n                    <>\r\n                        <input onChange={onStatusChange} autoFocus={true} onBlur={offEditMode}\r\n                               value={status}/>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <span onDoubleClick={onEditMode}>{props.status || \"No status\"}</span>\r\n                    </>\r\n                }\r\n            </>\r\n        )\r\n\r\n}","import React from \"react\";\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\nexport const Contacts: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div><b>{contactTitle}:</b> {contactValue}</div>\r\n    )\r\n}","import {GetProfileUser} from \"../../../api/api\";\r\nimport React from \"react\";\r\nimport { Contacts } from \"../Contacts/Contacts\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profileUser: GetProfileUser\r\n    isOwner: boolean\r\n    setEditMode: (editmode: boolean)=>void\r\n    editmode: boolean\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                {props.isOwner\r\n                    ?\r\n                    <button onClick={() => {props.setEditMode(true)}}>Edit</button>\r\n                    :\r\n                    \"\"\r\n                }\r\n            </div>\r\n\r\n            <div>\r\n                <b>Looking for a job:</b> {props.profileUser.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n\r\n            <div>\r\n                <div>\r\n                    <b>Contacts:</b>\r\n                </div>\r\n                {Object.keys(props.profileUser.contacts)\r\n                    .map(key => <Contacts contactTitle={key}\r\n                                          contactValue={(props.profileUser.contacts as any)[key]}\r\n                                          key={key}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {GetProfileUser} from \"../../../api/api\";\r\nimport React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {Contacts} from \"../Contacts/Contacts\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profileUser: GetProfileUser\r\n}\r\ntype formValues = {}\r\nexport const ProfileDataForm: React.FC<ProfileDataFormPropsType> = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            lookingForJob: '',\r\n        },\r\n        onSubmit: values => {\r\n            alert(JSON.stringify(values))\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <button type=\"submit\">Save</button>\r\n\r\n            <div>\r\n                {/*<b>Looking for a job:</b> {props.profileUser.lookingForAJob ? \"yes\" : \"no\"}*/}\r\n                <label htmlFor=\"lookingForJob:\"><b>Looking for a job:</b></label>\r\n                <div>\r\n                    <input\r\n                        id=\"lookingForJob\"\r\n                        name=\"lookingForJob\"\r\n                        type=\"checkbox\"\r\n                        onChange={formik.handleChange}\r\n                        value={formik.values.lookingForJob}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/*<div>*/}\r\n            {/*    <div>*/}\r\n            {/*        <b>Contacts:</b>*/}\r\n            {/*    </div>*/}\r\n            {/*    {Object.keys(props.profileUser.contacts)*/}\r\n            {/*        .map(key => <Contacts contactTitle={key}*/}\r\n            {/*                              contactValue={(props.profileUser.contacts as any)[key]}*/}\r\n            {/*                              key={key}/>)}*/}\r\n            {/*</div>*/}\r\n\r\n\r\n        </form>\r\n    );\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport { useFormik } from 'formik';\r\nimport style from \"../Profile.module.css\"\r\nimport {SpinnerLoader} from \"../../commons/SpinnerLoader/SpinnerLoader\";\r\nimport {GetProfileUser, UserContactsType} from \"../../../api/api\";\r\nimport {ProfileStatusHooks} from \"../ProfileStatus/ProfileStatusHooks\";\r\nimport { ProfileData } from \"../ProfileData/ProfileData\";\r\nimport { ProfileDataForm } from \"../ProfileData/ProfileFormData\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profileUser: GetProfileUser\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    contacts: UserContactsType\r\n    isOwner: boolean\r\n    savePhoto: (photo: any) => void\r\n}\r\n\r\nexport const ProfileInfo = React.memo((props: ProfileInfoPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const changeAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files !== null) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    if (!props.profileUser) {\r\n        return <SpinnerLoader/>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <div className={style.description}>\r\n                <div>\r\n                    {props.profileUser.fullName}\r\n                </div>\r\n                <div>\r\n                    <img src={props.profileUser.photos.small\r\n                        ?\r\n                        props.profileUser.photos.small\r\n                        :\r\n                        \"\"}\r\n                    />\r\n               \r\n\r\n                    <div>\r\n                        <b>Status:</b> <ProfileStatusHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n\r\n                    {/*<div>*/}\r\n                    {/*    <button onClick={() => {*/}\r\n                    {/*        setEditMode(!editMode)*/}\r\n                    {/*    }}>Edit*/}\r\n                    {/*    </button>*/}\r\n                    {/*</div>*/}\r\n                    {/*<ProfileData profileUser={props.profileUser}/>*/}\r\n                    {editMode\r\n                        ?\r\n                        <ProfileDataForm profileUser={props.profileUser}/>\r\n                        :\r\n                        <ProfileData isOwner={props.isOwner}\r\n                                     profileUser={props.profileUser}\r\n                                     editmode={editMode}\r\n                                     setEditMode={setEditMode}\r\n                        />\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n//-----------------------------------------------\r\n","import axios from \"axios\";\r\n\r\n\r\n\r\n\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\"api-key\": \"a1254a8c-0530-4921-8e26-69272bb1af33\"},\r\n})\r\n\r\n// type UserResponseType = {\r\n//     name: string\r\n//     id: number\r\n//     uniqueUrlName: string | null\r\n//     status: string\r\n//     followed: boolean\r\n//     photos: {\r\n//         small: string | null\r\n//         large: string | null\r\n//     }\r\n// }\r\n\r\n\r\n// export const usersAPI = {\r\n//     getUsers(currentPage: number = 1, pageSize: number = 20) { // User\r\n//         return instance.get<UsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n//             .then(response => response.data)\r\n//     },\r\n//     deleteUsers(userId: number) { //unfollow (User)\r\n//         return instance.delete<AuthResponseType>(`follow/${userId}`).then(response => response.data)\r\n//     },\r\n//     postUsers(userId: number) { //follow (User)\r\n//         return instance.post(`follow/${userId}`).then(response => response.data)\r\n//     },\r\n//     getProfile(userId: string) { // ProfileContainer\r\n//         console.warn(\"Obsolete method. Please use profileAPI object\")\r\n//         return profileAPI.getProfile(userId)\r\n//     },\r\n// }\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 20) { // User\r\n        return instance.get<ItemUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    deleteUsers(userId: number) { //unfollow (User)\r\n        return instance.delete<ResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    postUsers(userId: number) { //follow (User)\r\n        return instance.post<ResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    getProfile(userId: string) { // ProfileContainer   ??????????????\r\n        console.warn(\"Obsolete method. Please use profileAPI object\")\r\n        return profileAPI.getProfile(userId)\r\n    },\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) { // ProfileContainer\r\n        return instance.get<GetProfileUser>(`profile/` + userId)\r\n    },\r\n    getStatus(userId: string) { // ProfileContainer\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status})\r\n    },\r\n    savePhoto(file: any) {\r\n\r\n        const formData = new FormData()\r\n        formData.append(\"image\", file)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\nexport const authorizationAPI = {\r\n    me() { // Header Login-button\r\n        return instance.get(\"auth/me\").then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post<ResponseType>(\"auth/login\", {email, password, rememberMe})\r\n            .then(response => response.data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>(\"auth/login\")\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport type LoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\ntype ItemUsersResponseType = {\r\n    items: Array<UsersResponseType>\r\n    totalCount: number\r\n    error: null\r\n}\r\n\r\nexport type UsersResponseType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    status: string\r\n    followed: boolean\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\n\r\n\r\nexport type GetProfileUser = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: UserContactsType\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\nexport type UserContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {AllActionsType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {GetProfileUser, profileAPI, UserContactsType, usersAPI} from \"../api/api\";\r\n\r\n\r\n\r\n\r\nlet initialState: initialStateProfileReducerType = {\r\n    myPostsData: [\r\n        {id: v1(), likes: 2, post: \"Hello!\"},\r\n        {id: v1(), likes: 7, post: \"What your name?\"},\r\n        {id: v1(), likes: 5, post: \"Go! Go! Go!\"},\r\n        {id: v1(), likes: 4, post: \"Hi\"},\r\n    ],\r\n    profileUser: {\r\n        userId: 0,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        fullName: \"\",\r\n        contacts: {\r\n            github: \"\",\r\n            vk: \"\",\r\n            facebook: \"\",\r\n            instagram: \"\",\r\n            twitter: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n            mainLink: \"\",\r\n        },\r\n        photos: {\r\n            small: \"\",\r\n            large: \"\",\r\n        }\r\n    },\r\n    status: \"\",\r\n    // contacts: [],\r\n}\r\n\r\n\r\nexport const profileReducer = (state: initialStateProfileReducerType = initialState,\r\n                               action: AllActionsType): initialStateProfileReducerType => {\r\n\r\n    switch (action.type) {\r\n        case \"PROFILE-REDUCER/NEW-STATE-POST\":\r\n            const newPost: MyPostsType = {id: v1(), likes: 6, post: action.text}\r\n            return {\r\n                ...state,\r\n                myPostsData: [...state.myPostsData, newPost],\r\n            }\r\n        case \"PROFILE-REDUCER/SET_PROFILE_USER\":\r\n            return {\r\n                ...state,\r\n                profileUser: action.profileUser\r\n            }\r\n        case \"PROFILE-REDUCER/SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"PROFILE-REDUCER/GET-CONTACTS\":\r\n            return {\r\n                ...state,\r\n                profileUser: {...state.profileUser, contacts: action.contacts},\r\n            }\r\n        case \"PROFILE-REDUCER/SAVE-PHOTO\":\r\n            return {\r\n                ...state,\r\n                profileUser: {...state.profileUser, photos: action.file},\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const newStatePostAC = (text: string): NewStatePostType => {\r\n    return {\r\n        type: \"PROFILE-REDUCER/NEW-STATE-POST\", text\r\n    }\r\n}\r\n\r\nexport const SetProfileUserAC = (profileUser: GetProfileUser): SetProfileUserType => {\r\n    return {\r\n        type: \"PROFILE-REDUCER/SET_PROFILE_USER\", profileUser\r\n    }\r\n}\r\n\r\nexport const setStatusAC = (status: string): SetStatusType => {\r\n    return {\r\n        type: \"PROFILE-REDUCER/SET_STATUS\", status\r\n    }\r\n}\r\n\r\nconst getContactsAC = (contacts: UserContactsType) => (\r\n    {type: \"PROFILE-REDUCER/GET-CONTACTS\", contacts} as const\r\n)\r\n\r\nconst savePhotoAC = (file: any) => (\r\n    {type: \"PROFILE-REDUCER/SAVE-PHOTO\", file} as const\r\n)\r\n\r\n\r\nexport const getProfileThunkCreator = (userId: string) => async (dispatch: Dispatch) => {\r\n      let response = await usersAPI.getProfile(userId)\r\n            dispatch(SetProfileUserAC(response.data))\r\n            dispatch(getContactsAC(response.data.contacts))\r\n\r\n    }\r\n\r\n\r\nexport const getStatusThunkCreator = (userId: string) =>  async (dispatch: Dispatch) => {\r\n        let response = await  profileAPI.getStatus(userId)\r\n            if (response.data) {\r\n                dispatch(setStatusAC(response.data))\r\n            } else {\r\n                return \"\"\r\n            }\r\n}\r\n\r\nexport const updateStatusThunkCreator = (status: string) => async (dispatch: Dispatch) => {\r\n    let response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatusAC(status))\r\n            }\r\n    }\r\n\r\nexport const getContactsThunkCreator = (userId: string) => async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.getProfile(userId)\r\n            if (response.data) {\r\n                dispatch(getContactsAC(response.data.contacts))\r\n            }\r\n\r\n}\r\nexport const savePhotoTC = (file: any) => async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.savePhoto(file)\r\n            if (response.data) {\r\n                dispatch(savePhotoAC(response.data.data.photos))\r\n            }\r\n}\r\n\r\n\r\n\r\n\r\nexport type MyPostsType = {\r\n    id: string\r\n    likes: number\r\n    post: string\r\n}\r\n\r\nexport type initialStateProfileReducerType = {\r\n    myPostsData: Array<MyPostsType>\r\n    profileUser: GetProfileUser\r\n    status: string\r\n}\r\n\r\n\r\ntype NewStatePostType = {\r\n    type: \"PROFILE-REDUCER/NEW-STATE-POST\"\r\n    text: string\r\n}\r\ntype ChangeNewTextCallbackType = {\r\n    type: \"PROFILE-REDUCER/CHANGE-NEW-TEXT-CALLBACK\"\r\n    textProfile: string\r\n}\r\ntype SetProfileUserType = {\r\n    type: \"PROFILE-REDUCER/SET_PROFILE_USER\"\r\n    profileUser: GetProfileUser\r\n}\r\n\r\n\r\ntype SetStatusType = {\r\n    type: \"PROFILE-REDUCER/SET_STATUS\"\r\n    status: string\r\n}\r\ntype GetContactsType = ReturnType<typeof getContactsAC>\r\ntype SavePhotoActionType = ReturnType<typeof savePhotoAC>\r\n\r\nexport type ProfileActionsType = NewStatePostType\r\n    | ChangeNewTextCallbackType\r\n    | SetProfileUserType\r\n    | SetStatusType\r\n    | GetContactsType\r\n    | SavePhotoActionType","import React from \"react\";\r\nimport style from \"./Post.module.css\"\r\n\r\nexport const Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <div className={style.item}>\r\n                <img\r\n                    src=\"https://static.vecteezy.com/system/resources/thumbnails/001/993/889/small_2x/beautiful-latin-woman-avatar-character-icon-free-vector.jpg\"\r\n                    alt=\"\"/>\r\n            </div>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                Like {props.likes}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\ntype PostType = {\r\n    message: string\r\n    likes: number\r\n}","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\n\r\n\r\ntype TextareaFormType = {\r\n    clickCallback: (textarea: string) => void\r\n}\r\n\r\n\r\nexport const TextareaForm = (props: TextareaFormType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            textarea: \"\",\r\n        },\r\n        validate: values => {\r\n            console.log(values.textarea.length)\r\n            const errors: any = {};\r\n            if (!values.textarea) {\r\n                errors.textarea = \"You can enter a message\";\r\n            } else if (values.textarea.length > 140) {\r\n                errors.textarea = \"No more than 140 symbols\";\r\n            }\r\n            return errors\r\n        },\r\n        onSubmit: values => {\r\n            props.clickCallback(values.textarea)\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"textarea\">Add post</label>\r\n            <div>\r\n                <textarea\r\n                    id=\"textarea\"\r\n                    name=\"textarea\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.textarea}\r\n                    onBlur={formik.handleBlur}\r\n                />\r\n            </div>\r\n            {formik.errors.textarea\r\n                ? <div style={{color: \"green\"}}>{formik.errors.textarea}</div>\r\n                : <div></div>}\r\n            <button type=\"submit\">Add post</button>\r\n        </form>\r\n    );\r\n}","import React from \"react\";\r\nimport style from \"./MyPosts.module.css\"\r\nimport {Post} from \"./Post/Post\";\r\nimport {ProfilePropsType} from \"./MyPostsContainer\";\r\nimport {MyPostsType} from \"../../../redux/profile-reducer\";\r\nimport {TextareaForm} from \"../../commons/TextareaForm/TextareaForm\";\r\n\r\n\r\nexport const MyPosts = React.memo((props: ProfilePropsType) => {\r\n\r\n    const myPostsDataMap =\r\n        props.profile.myPostsData.map(\r\n            (el: MyPostsType) =>\r\n                <Post message={el.post} likes={el.likes}/>).reverse() //!переворот\r\n\r\n    const addNewPost = (textarea: string) => {\r\n        props.newPost(textarea)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={style.posts}>\r\n            <TextareaForm clickCallback={addNewPost}/>\r\n            <div className={style.post}>\r\n                {myPostsDataMap}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n// type TextareaFormType = {\r\n//     clickCallback: (textarea: string) => void\r\n// }\r\n\r\n","import {Redirect} from \"react-router-dom\";\r\nimport * as React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {ComponentType} from \"react\";\r\n\r\ntype MapStateToPropsRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsRedirectType => {\r\n  return {\r\n      isAuth: state.authorization.isAuthorized,\r\n  }\r\n}\r\n\r\nexport function withAuthRedirectHOC<T>(Component: ComponentType<T>) {\r\n   const RedirectComponent = (props: MapStateToPropsRedirectType) => {\r\n       let {isAuth, ...othersProps} = props\r\n        if (!isAuth) {return <Redirect to={\"/login\"}/>}\r\n        return <Component {...othersProps as T}/>\r\n    }\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","import React from \"react\";\r\n\r\nimport {newStatePostAC, initialStateProfileReducerType} from \"../../../redux/profile-reducer\"\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirectHOC} from \"../../../hoc/withAuthRedirectHOC\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profile: initialStateProfileReducerType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    newPost: (textarea: string) => void\r\n}\r\n\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        profile: state.profile\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n\r\n    return {\r\n        newPost: (textarea: string) => {\r\n            dispatch(newStatePostAC(textarea))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectHOC\r\n)(MyPosts)\r\n\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {GetProfileUser, UserContactsType} from \"../../api/api\";\r\n\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profileUser: GetProfileUser\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    contacts: UserContactsType\r\n    isOwner: boolean\r\n    savePhoto: (photo: any) => void\r\n\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner={props.isOwner}\r\n                contacts={props.contacts}\r\n                profileUser={props.profileUser}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import {RootStateType} from \"../redux-store\";\r\n\r\n\r\nexport const getProfileUserSelector = (state: RootStateType) => {\r\n    return state.profile.profileUser\r\n}\r\nexport const getStatusSelector = (state: RootStateType) => {\r\n    return state.profile.status\r\n}\r\nexport const getMyUserIdSelector = (state: RootStateType) => {\r\n    return state.authorization.id\r\n}\r\nexport const getIsAuthorizedSelector = (state: RootStateType) => {\r\n    return state.authorization.isAuthorized\r\n}\r\nexport const getContactsSelector = (state: RootStateType) => {\r\n    return state.profile.profileUser.contacts\r\n}\r\n\r\n","import * as React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {\r\n    getContactsThunkCreator,\r\n    getProfileThunkCreator,\r\n    getStatusThunkCreator, savePhotoTC,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {GetProfileUser, UserContactsType} from \"../../api/api\";\r\nimport {\r\n    getProfileUserSelector,\r\n    getStatusSelector,\r\n    getMyUserIdSelector,\r\n    getIsAuthorizedSelector,\r\n    getContactsSelector\r\n} from \"../../redux/selectors/profile-selectors\";\r\n\r\n\r\ntype MapStateType = {\r\n    profileUser: GetProfileUser\r\n    status: string\r\n    myUserId: string\r\n    isAuthorized: boolean\r\n    contacts: UserContactsType\r\n}\r\ntype MapDispatchType = {\r\n    // SetProfileUserAC: (userProfile: string) => void\r\n    getProfileThunkCreator: (userId: string) => void\r\n    getStatusThunkCreator: (userId: string) => void\r\n    updateStatusThunkCreator: (status: string) => void\r\n    getContactsThunkCreator: (userId: string) => void\r\n    savePhotoTC: (photo: any) => void\r\n\r\n}\r\ntype ParamsType = {\r\n    userId: string\r\n}\r\ntype StateDispatchType = MapStateType & MapDispatchType\r\ntype PropsType = RouteComponentProps<ParamsType> & StateDispatchType\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.myUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getProfileThunkCreator(userId)\r\n        this.props.getStatusThunkCreator(userId)\r\n        this.props.getContactsThunkCreator(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         savePhoto={this.props.savePhotoTC}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profileUser={this.props.profileUser}\r\n                         status={this.props.status}\r\n                         contacts={this.props.contacts}\r\n                         updateStatus={this.props.updateStatusThunkCreator}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateType => {\r\n    return {\r\n        profileUser: getProfileUserSelector(state),\r\n        status: getStatusSelector(state),\r\n        myUserId: getMyUserIdSelector(state),\r\n        isAuthorized: getIsAuthorizedSelector(state),\r\n        contacts: getContactsSelector(state),\r\n    }\r\n}\r\n\r\n    export default compose<React.ComponentType>(\r\n    // withAuthRedirectHOC,\r\n    connect(mapStateToProps,\r\n        {\r\n            getProfileThunkCreator,\r\n            getStatusThunkCreator,\r\n            updateStatusThunkCreator,\r\n            getContactsThunkCreator,\r\n            savePhotoTC,\r\n        }),\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n\r\n// export const WithRouterDataContainerComponent = withRouter(ProfileContainer);\r\n// export default withAuthRedirectHOC(connect(mapStateToProps,{getProfileThunkCreator}) (WithRouterDataContainerComponent));\r\n","import {v1} from \"uuid\";\r\nimport {AllActionsType} from \"./redux-store\";\r\n\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n    sex: string\r\n}\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type InitialStateDialogType = {\r\n    dialogsData: Array<DialogsType>\r\n    messageData: Array<MessageType>\r\n    // newPostDialogs: string\r\n}\r\n\r\nexport type NewDialogsPostType = {\r\n    type: \"DIALOGS-REDUCER/NEW-DIALOGS-POST\"\r\n    text: string\r\n}\r\nexport type CallbackDialogsType = {\r\n    type: \"DIALOGS-REDUCER/CALLBACK-DIALOGS\"\r\n    textDialogs: string\r\n}\r\n\r\nconst NEW_DIALOGS_POST = \"DIALOGS-REDUCER/NEW-DIALOGS-POST\"\r\nconst CALLBACK_DIALOGS = \"DIALOGS-REDUCER/CALLBACK-DIALOGS\"\r\n\r\nlet initialState: InitialStateDialogType = {\r\n    dialogsData: [\r\n        {id: v1(), name: \"Ivan\", sex: \"boy\"},\r\n        {id: v1(), name: \"Petr\", sex: \"boy\"},\r\n        {id: v1(), name: \"Masha\", sex: \"girl\"},\r\n        {id: v1(), name: \"Vasya\", sex: \"boy\"},\r\n        {id: v1(), name: \"Klava\", sex: \"girl\"},\r\n        {id: v1(), name: \"Timur\", sex: \"boy\"},\r\n    ],\r\n    messageData: [\r\n        {id: v1(), message: \"Hey\"},\r\n        {id: v1(), message: \"How are you?\"},\r\n        {id: v1(), message: \"Have a nice day!\"},\r\n        {id: v1(), message: \"AAAAAAAAAA\"},\r\n        {id: v1(), message: \"Hi\"},\r\n        {id: v1(), message: \"Hi\"},\r\n    ],\r\n    // newPostDialogs: \"\",\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogType = initialState, action: AllActionsType): InitialStateDialogType => {\r\n\r\n    switch (action.type) {\r\n        case NEW_DIALOGS_POST:\r\n\r\n            const newPost: MessageType = {id: v1(), message: action.text}\r\n\r\n            return {\r\n                ...state,\r\n                messageData: [...state.messageData, newPost],\r\n                // newPostDialogs: \"\",\r\n            }\r\n\r\n        // case CALLBACK_DIALOGS:\r\n        //     return {\r\n        //         ...state,\r\n        //         newPostDialogs: action.textDialogs\r\n        //     }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const NewDialogsPostAC = (text: string): NewDialogsPostType => {\r\n    return {\r\n        type: NEW_DIALOGS_POST,\r\n        text,\r\n    }\r\n}\r\n\r\n// export const CallbackDialogsAC = (text: string): CallbackDialogsType => {\r\n//\r\n//     return {\r\n//         type: CALLBACK_DIALOGS,\r\n//         textDialogs: text\r\n//     }\r\n// }\r\n\r\n","import React from \"react\";\r\nimport style from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nexport type DialogItemType = {\r\n    name: string\r\n    id: string\r\n    sex: string\r\n}\r\n\r\n\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    const ava =() =>{\r\n        if (props.sex === \"boy\") {\r\n            return avaBoy\r\n        }\r\n        if (props.sex === \"girl\") {\r\n            return avaGirl\r\n        }\r\n    }\r\n    const avaBoy = <img src=\"https://static.vecteezy.com/system/resources/thumbnails/002/002/427/small/man-avatar-character-isolated-icon-free-vector.jpg\" alt=\"boy\"/>\r\n    const avaGirl = <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTea6mpJZODj13Lvutndl6PgvULvVC3tPcreM4doidd7vHImnTOeK0HkfZIrFGeHuN_aJc&usqp=CAU\" alt=\"girl\"/>\r\n\r\n    return (\r\n        <div className={style.dialog}>\r\n\r\n            <NavLink to={path} activeClassName={style.active}>{ava()}{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport style from \"../Dialogs.module.css\";\r\n\r\nexport type MessageType = {\r\n    text: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={style.message}>\r\n            {props.text}\r\n        </div>\r\n    )\r\n}\r\n","import {NewDialogsPostAC, InitialStateDialogType} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirectHOC} from \"../../hoc/withAuthRedirectHOC\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogs: InitialStateDialogType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addDialog: (textarea: string) => void\r\n}\r\n\r\nexport type DialogPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogs: state.dialogs,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n\r\n    return {\r\n        addDialog: (textarea: string) => {\r\n            dispatch(NewDialogsPostAC(textarea))\r\n        }\r\n    }\r\n}\r\n\r\nexport const DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectHOC\r\n)(Dialogs)\r\n\r\n\r\n//\r\n// export { DialogsContainer as default } from \"./DialogsContainer\";\r\n\r\n","import React from \"react\";\r\nimport style from \"./Dialogs.module.css\"\r\n\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\n\r\nimport {DialogPropsType} from \"./DialogsContainer\";\r\nimport { TextareaForm } from \"../commons/TextareaForm/TextareaForm\";\r\n\r\n\r\nexport const Dialogs = (props: DialogPropsType) => {\r\n\r\n\r\n    const dialogItemsMap = props.dialogs.dialogsData.map(el => <DialogItem key={el.id} name={el.name} id={el.id}\r\n                                                                           sex={el.sex}/>)\r\n    const messageMap = props.dialogs.messageData.map(el => <Message key={el.id} text={el.message}/>)\r\n\r\n    const clickAddDialog = (textarea: string) => {\r\n        props.addDialog(textarea)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogs_items}>\r\n                {dialogItemsMap}\r\n            </div>\r\n            <div className={style.all_messages}>\r\n                {messageMap}\r\n            </div>\r\n            <TextareaForm clickCallback={clickAddDialog} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n// type TextareaFormType = {\r\n//     clickCallback: (textarea: string) => void\r\n//     textareaValue: string\r\n// }\r\n// const TextareaForm = (props: TextareaFormType) => {\r\n//     const formik = useFormik({\r\n//         initialValues: {\r\n//             textarea: props.textareaValue,\r\n//         },\r\n//         onSubmit: values => {\r\n//             // alert(JSON.stringify(values));\r\n//             props.clickCallback(values.textarea)\r\n//         },\r\n//     });\r\n//     return (\r\n//         <form onSubmit={formik.handleSubmit}>\r\n//             <label htmlFor=\"textarea\">My posts</label>\r\n//             <div>\r\n//                 <textarea\r\n//                     placeholder=\"Add text\"\r\n//                     id=\"textarea\"\r\n//                     name=\"textarea\"\r\n//                     // type=\"textarea\"\r\n//                     onChange={formik.handleChange}\r\n//                     value={formik.values.textarea}\r\n//                 />\r\n//             </div>\r\n//             <button type=\"submit\">Add post</button>\r\n//         </form>\r\n//     );\r\n// }\r\n\r\n// export const Dialogs = (props: DialogPropsType) => {\r\n//\r\n//\r\n//     const dialogItemsMap = props.dialogs.dialogsData.map(el => <DialogItem key={el.id} name={el.name} id={el.id}\r\n//                                                                            sex={el.sex}/>)\r\n//     const messageMap = props.dialogs.messageData.map(el => <Message key={el.id} text={el.message}/>)\r\n//\r\n//\r\n//     const setTextValueChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         let text = e.currentTarget.value\r\n//         props.textValueChange(text)\r\n//     }\r\n//\r\n//     const clickAddDialog = () => {\r\n//         props.addDialog(props.dialogs)\r\n//         // props.dialogs.newPostDialogs = \"\"\r\n//     }\r\n//\r\n//\r\n//\r\n//     // alert(props.isAuth)\r\n//     // if (props.isAuth === false) {\r\n//     //   return  <Redirect to={\"/login\"}/>\r\n//     // }\r\n//\r\n//     return (\r\n//         <div className={style.dialogs}>\r\n//             <div className={style.dialogs_items}>\r\n//                 {dialogItemsMap}\r\n//             </div>\r\n//\r\n//             <div className={style.all_messages}>\r\n//                 {messageMap}\r\n//             </div>\r\n//\r\n//             <div>\r\n//                 <textarea onChange={setTextValueChange} value={props.dialogs.newPostDialogs}/>\r\n//                 <div>\r\n//                     <button onClick={clickAddDialog}>Add post</button>\r\n//                 </div>\r\n//             </div>\r\n//\r\n//             {/*<TextareaForm />*/}\r\n//         </div>\r\n//     )\r\n// }","import {Dispatch} from \"redux\";\r\nimport {usersAPI, UsersResponseType} from \"../api/api\";\r\n\r\n//20163\r\n\r\nexport type UserType = {\r\n\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string | null\r\n    status: string\r\n    followed: boolean\r\n    photos: {\r\n        small: string | null\r\n        large: string | null\r\n    }\r\n}\r\n// export type UserType = {\r\n//     name: string\r\n//     id: number\r\n//     uniqueUrlName: string | null\r\n//     status: string\r\n//     followed: boolean\r\n//     photos: {\r\n//         small: string | null\r\n//         large: string | null\r\n//     }\r\n// }\r\n\r\n\r\nexport type InitialStateUsersType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n\r\n}\r\ntype FollowActionType = {\r\n    type: \"USERS_REDUCER/FOLLOW\"\r\n    id: number\r\n}\r\ntype UnFollowAcnionType = {\r\n    type: \"USERS_REDUCER/UNFOLLOW\"\r\n    id: number\r\n}\r\ntype SetNewUsersAcnionType = {\r\n    type: \"USERS_REDUCER/SET-USERS\"\r\n    users: Array<UserType>\r\n}\r\ntype SetCurrentPageAcnionType = {\r\n    type: \"USERS_REDUCER/SET-CURRENT-PAGE\"\r\n    page: number\r\n}\r\ntype SetTotalUsersCountActionType = {\r\n    type: \"USERS_REDUCER/SET-TOTAL-USERS-COUNT\"\r\n    totalCount: number\r\n}\r\ntype SpinnerLoaderActionType = {\r\n    type: \"USERS_REDUCER/SPINNER-LOADER-FETCHING\"\r\n    isFetching: boolean\r\n}\r\ntype FollowingInProgressActionType = {\r\n    type: \"USERS_REDUCER/FOLLOWING-IN-PROGRESS\"\r\n    isFetching: boolean\r\n    id: number\r\n}\r\nexport type UsersReducerActionType = FollowActionType |\r\n    UnFollowAcnionType | SetNewUsersAcnionType |\r\n    SetCurrentPageAcnionType | SetTotalUsersCountActionType |\r\n    SpinnerLoaderActionType | FollowingInProgressActionType\r\n\r\n//--- action creators types end ---//\r\nconst FOLLOW = \"USERS_REDUCER/FOLLOW\"\r\nconst UNFOLLOW = \"USERS_REDUCER/UNFOLLOW\"\r\nconst SET_USERS = \"USERS_REDUCER/SET-USERS\"\r\nconst SET_CURRENT_PAGE = \"USERS_REDUCER/SET-CURRENT-PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"USERS_REDUCER/SET-TOTAL-USERS-COUNT\"\r\nconst SPINNER_LOADER_FETCHING = \"USERS_REDUCER/SPINNER-LOADER-FETCHING\"\r\nconst FOLLOWING_IN_PROGRESS = \"USERS_REDUCER/FOLLOWING-IN-PROGRESS\"\r\n\r\nexport const initialStateUsers: InitialStateUsersType = {\r\n    users: [],\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialStateUsers,\r\n                             action: UsersReducerActionType) => {\r\n    switch (action.type) {\r\n        case SPINNER_LOADER_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        }\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => {\r\n                    if (el.id === action.id) {\r\n                        return {...el, followed: true}\r\n                    } else {\r\n                        return el\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(el => {\r\n                    if (el.id === action.id) {\r\n                        return {...el, followed: false}\r\n                    } else {\r\n                        return el\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...action.users],\r\n                // ...state.users\r\n            }\r\n        }\r\n        case FOLLOWING_IN_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.id] :\r\n                    state.followingInProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const followAC = (id: number): FollowActionType => (\r\n    {type: FOLLOW, id}\r\n)\r\nexport const unFollowAC = (id: number): UnFollowAcnionType => (\r\n    {type: UNFOLLOW, id}\r\n)\r\nexport const setNewUsersAC = (users: Array<UsersResponseType>): SetNewUsersAcnionType => (\r\n    {type: SET_USERS, users}\r\n)\r\n// export const setNewUsersAC = (users: Array<UserType>): SetNewUsersAcnionType => (\r\n//     {type: SET_USERS, users}\r\n// )\r\n\r\nexport const setCurrentPageAC = (page: number): SetCurrentPageAcnionType => (\r\n    {type: SET_CURRENT_PAGE, page}\r\n)\r\nexport const setTotalUsersCountAC = (totalCount: number): SetTotalUsersCountActionType => (\r\n    {type: SET_TOTAL_USERS_COUNT, totalCount}\r\n)\r\nexport const spinnerLoaderFetchingAC = (isFetching: boolean): SpinnerLoaderActionType => (\r\n    {type: SPINNER_LOADER_FETCHING, isFetching}\r\n)\r\nexport const followingInProgressAC = (isFetching: boolean, id: number): FollowingInProgressActionType => (\r\n    {type: FOLLOWING_IN_PROGRESS, isFetching, id}\r\n)\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {  // Thunk\r\n        dispatch(spinnerLoaderFetchingAC(true))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n\r\n    let response = await  usersAPI.getUsers(currentPage, pageSize)\r\n            dispatch(spinnerLoaderFetchingAC(false))\r\n            dispatch(setNewUsersAC(response.items))\r\n            dispatch(setTotalUsersCountAC(response.totalCount))\r\n}\r\n\r\nexport const changePageThunkCreator = (page: number, pageSize: number) => async (dispatch: Dispatch) => {  // Thunk\r\n        dispatch(setCurrentPageAC(page))\r\n        dispatch(spinnerLoaderFetchingAC(true))\r\n    let response = await usersAPI.getUsers(pageSize)\r\n            dispatch(spinnerLoaderFetchingAC(false))\r\n            dispatch(setNewUsersAC(response.items))\r\n}\r\n\r\nexport const unfollowUsersThunkCreator = (userId: number) => async (dispatch: Dispatch) => {\r\n\r\n        dispatch(followingInProgressAC(true, userId))\r\n    let response = await usersAPI.deleteUsers(userId)\r\n            if (response.resultCode === 0) {\r\n                dispatch(unFollowAC(userId))\r\n            }\r\n            dispatch(followingInProgressAC(false, userId))\r\n}\r\n\r\nexport const followUsersThunkCreator = (userId: number) => async (dispatch: Dispatch) => {\r\n\r\n        dispatch(followingInProgressAC(true, userId))\r\n        let response = await  usersAPI.postUsers(userId)\r\n            if (response.resultCode === 0) {\r\n                dispatch(followAC(userId))\r\n            }\r\n            dispatch(followingInProgressAC(false, userId))\r\n}\r\n","import cssStyles from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {log} from \"util\";\r\n\r\n\r\ntype PropsType = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    onChangePage: (pageNum: number) => void\r\n    currentPage: number\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator = React.memo((props: PropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props\r\n        .totalItemsCount / props.pageSize);\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n    const spanType = () => {\r\n        return {\r\n            border: \"1px solid black\",\r\n            margin: \"2px\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={cssStyles.paginatorWrapper}>\r\n\r\n            {portionNumber > 1 && <button style={{color: \"red\"}} onClick={() => {setPortionNumber(1)\r\n            }}>START</button>}\r\n            {portionNumber > 1 && <button style={{margin: \"0 5px 0 5px\"}} onClick={() => {setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n\r\n            {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map(pageNum =>\r\n                    <span onClick={(event) => props.onChangePage(pageNum)}\r\n                          className={props.currentPage === pageNum ? cssStyles.selectedPage : \"\"}\r\n                          key={pageNum}\r\n                          style={spanType()}\r\n                    >{pageNum}\r\n                 </span>)}\r\n            {portionNumber < pagesCount / props.portionSize &&\r\n                <button style={{margin: \"0 5px 0 5px\"}} onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)}}>NEXT</button>}\r\n            {portionNumber < pagesCount / props.portionSize &&\r\n                <button style={{color: \"red\"}} onClick={() => {setPortionNumber(pagesCount / props.portionSize)\r\n                }}>END</button>}\r\n\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/avatar_girl.49d85a96.png\";","import styles from \"./user.module.css\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../../redux/users-reducer\";\r\nimport avatarDefault from \"../../../assets/images/avatar_girl.png\"\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: number[]\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n\r\n    onChangePage: (pageNum: number) => void\r\n    followUsersThunk: (userId: number) => void\r\n    unfollowUsersThunk: (userId: number) => void\r\n}\r\n\r\nexport const User = React.memo((props: PropsType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + props.user.id}>\r\n                            <img src={props.user.photos.small !== null\r\n                                ?\r\n                                props.user.photos.small\r\n                                :\r\n                                avatarDefault}\r\n                                 className={styles.usersAvatars}/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {\r\n                            props.user.followed === true ?\r\n                                <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                        onClick={() => {\r\n                                            props.unfollowUsersThunk(props.user.id)\r\n                                        }}>Unfollow</button> :\r\n                                <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                        onClick={() => {\r\n                                            props.followUsersThunk(props.user.id)\r\n                                        }}>Follow</button>\r\n                        }\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <div>{props.user.name}</div>\r\n                    <div>{props.user.status !== null\r\n                        ?\r\n                        <span>Status: {props.user.status}</span>\r\n                        :\r\n                        <span></span>}</div>\r\n                </span>\r\n            <span>\r\n                    <div>{\"props.user.location.city\"}</div>\r\n                    <div>{\"props.user.location.country\"}</div>\r\n                </span>\r\n\r\n        </div>\r\n    )\r\n})","import {UserType} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {Paginator} from \"../commons/Paginator/Paginator\";\r\nimport {User} from \"./User/User\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UserType>\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    pageSize: number\r\n    followingInProgress: number[]\r\n\r\n    onChangePage: (pageNum: number) => void\r\n    followUsersThunk: (userId: number) => void\r\n    unfollowUsersThunk: (userId: number) => void\r\n}\r\n\r\nexport const Users = React.memo((props: PropsType) => {\r\n\r\n    const portionSize = 10\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Paginator pageSize={props.pageSize}\r\n                       totalItemsCount={props.totalItemsCount}\r\n                       onChangePage={props.onChangePage}\r\n                       currentPage={props.currentPage}\r\n                       portionSize={portionSize}\r\n            />\r\n\r\n            {props.users.map((user: UserType) => <User key={user.id}\r\n                                                       user={user}\r\n                                                       followingInProgress={props.followingInProgress}\r\n                                                       followUsersThunk={props.followUsersThunk}\r\n                                                       totalItemsCount={props.totalItemsCount}\r\n                                                     pageSize={props.pageSize}\r\n                                                       unfollowUsersThunk={props.unfollowUsersThunk}\r\n                                                       currentPage={props.currentPage}\r\n                                                       onChangePage={props.onChangePage}/>)}\r\n\r\n\r\n        </div>\r\n    )\r\n})","import {RootStateType} from \"../redux-store\";\r\n\r\n\r\n\r\nexport const getUsersSelector = (state: RootStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state: RootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: RootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: RootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    changePageThunkCreator,\r\n    getUsersThunkCreator,\r\n    followUsersThunkCreator,\r\n    UserType, unfollowUsersThunkCreator, setCurrentPageAC\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {SpinnerLoader} from \"../commons/SpinnerLoader/SpinnerLoader\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirectHOC} from \"../../hoc/withAuthRedirectHOC\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsersSelector\r\n} from \"../../redux/selectors/users-selectors\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: number[]\r\n}\r\n\r\ntype DispatchToPropsType = {\r\n    // follow: (userId: number) => void\r\n    // unfollow: (userId: number) => void\r\n    // setNewUser: (users: Array<UserType>) => void\r\n    // setCurrentPage: (page: number) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // spinnerLoaderFetching: (isFetching: boolean) => void\r\n    // followingInProgressAction: (isFetching: boolean, id: number) => void\r\n    getUsersThunk: (currentPage: number, pageSize: number) => void\r\n    changePageThunk: (pageNum: number, pageSize: number) => void\r\n    followUsersThunk: (userId: number) => void\r\n    unfollowUsersThunk: (userId: number) => void\r\n}\r\n\r\nexport type UsersType = MapStateToPropsType & DispatchToPropsType\r\n\r\nclass UsersContainer extends React.Component<UsersType> {\r\n\r\n\r\n    componentDidMount() {\r\n       this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onChangePage(pageNum: number) {\r\n        // this.props.changePageThunk(pageNum, this.props.pageSize)\r\n        this.props.getUsersThunk(pageNum, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.isFetching ? <SpinnerLoader/> : null}\r\n            <Users\r\n                totalItemsCount={this.props.totalItemsCount}\r\n                pageSize={this.props.pageSize}\r\n                onChangePage={this.onChangePage.bind(this)}\r\n                currentPage={this.props.currentPage}\r\n                users={this.props.users}\r\n                followingInProgress={this.props.followingInProgress}\r\n                followUsersThunk={this.props.followUsersThunk}\r\n                unfollowUsersThunk={this.props.unfollowUsersThunk}\r\n\r\n\r\n            />\r\n        </>\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        users: getUsersSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalItemsCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n    }\r\n}\r\n// const mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalItemsCount: state.usersPage.totalItemsCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress,\r\n//     }\r\n// }\r\n\r\n\r\n// export default connect(mapStateToProps, {\r\n//\r\n//     getUsersThunk: getUsersThunkCreator,\r\n//     changePageThunk: changePageThunkCreator,\r\n//     followUsersThunk: followUsersThunkCreator,\r\n//     unfollowUsersThunk: unfollowUsersThunkCreator,\r\n// })(UsersContainer)\r\n\r\nexport default compose<React.ComponentType>(\r\n    // withAuthRedirectHOC,\r\n    connect(mapStateToProps, {\r\n        getUsersThunk: getUsersThunkCreator,\r\n        changePageThunk: changePageThunkCreator,\r\n        followUsersThunk: followUsersThunkCreator,\r\n        unfollowUsersThunk: unfollowUsersThunkCreator,\r\n    })\r\n)(UsersContainer)","import {Dispatch} from \"redux\";\r\nimport { ThunkDispatch} from \"redux-thunk\";\r\nimport {authorizationAPI} from \"../api/api\";\r\nimport {AllActionsType, RootStateType} from \"./redux-store\";\r\n\r\n\r\nconst InitialAuthState: InitialAuthStateType = {\r\n    id: \"\",\r\n    email: \"\",\r\n    login: \"\",\r\n    isAuthorized: false,\r\n    serverError: null,\r\n}\r\n\r\nexport const authorizationReducer = (state: InitialAuthStateType = InitialAuthState,\r\n                                     action: AuthAllActionType): InitialAuthStateType => {\r\n    switch (action.type) {\r\n        case \"AUTHORIZATION/SET_AUTH_USER_DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                // isAuthorized: true,\r\n            }\r\n        case \"AUTHORIZATION/SET-SERVER-ERROR\":\r\n            return {\r\n                ...state,\r\n                serverError: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: string, email: string, login: string, isAuthorized: boolean) => ({\r\n    type: \"AUTHORIZATION/SET_AUTH_USER_DATA\", payload: {id, email, login, isAuthorized}\r\n} as const)\r\n\r\nexport const setServerError = (error: string | null) =>\r\n    ({type: \"AUTHORIZATION/SET-SERVER-ERROR\", error} as const)\r\n\r\nexport const isAuthorizedUserTC = () => async (dispatch: Dispatch) => {\r\n   let response = await authorizationAPI.me()\r\n            if (response.resultCode === 0) {\r\n                let {id, email, login} = response.data\r\n                dispatch(setAuthUserData(id, email, login, true))\r\n            }\r\n}\r\n\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) =>\r\n   async (dispatch: ThunkDispatch<RootStateType, unknown, AllActionsType> ) => {\r\n       let response = await authorizationAPI.login(email, password, rememberMe)\r\n\r\n                if (response.resultCode === 0) {\r\n                    dispatch(isAuthorizedUserTC())\r\n                } else {\r\n                    if (response.messages.length) {\r\n                        dispatch(setServerError(response.messages[0]))\r\n\r\n                    }\r\n                }\r\n\r\n    }\r\n\r\nexport const logOutTC = () => async (dispatch: Dispatch) => {\r\n       let response = await  authorizationAPI.logOut()\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setAuthUserData(\"\", \"\", \"\", false))\r\n                }\r\n    }\r\n\r\nexport type AuthAllActionType = SetAuthUserDataActionType | SetErrorActionType\r\ntype SetAuthUserDataActionType = ReturnType<typeof setAuthUserData>\r\ntype SetErrorActionType = ReturnType<typeof setServerError>\r\n\r\n\r\nexport type InitialAuthStateType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n    isAuthorized: boolean\r\n    serverError: string | null\r\n}\r\n\r\nexport type DataType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {ErrorMessage, Field} from 'formik';\r\nimport {Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {loginTC} from \"../../redux/authorization-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const Login = React.memo(() => {\r\n    const isAuthorized = useSelector<RootStateType>(state =>\r\n        state.authorization.isAuthorized)\r\n    const serverError = useSelector<RootStateType,  string | null>(state => state.authorization.serverError)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    if (isAuthorized) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{email: \"\", password: \"\", rememberMe: false}}\r\n                validationSchema={Yup.object({\r\n                    email: Yup.string().email('Enter valid email address').required('Email required'),\r\n                    password: Yup.string().min(4, 'Password must be 4 characters but less 20')\r\n                        .max(20, 'Password must be 4 characters but less 20')\r\n                        .required('Password required')\r\n\r\n                })}\r\n                onSubmit={(values) => {\r\n                    dispatch(loginTC(values.email, values.password, values.rememberMe))\r\n\r\n                }}\r\n            >\r\n                {formik => (\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <div>\r\n                            <div><label htmlFor=\"email\">Email Address</label></div>\r\n                            <div><Field name=\"email\" type=\"email\"/></div>\r\n                            <div style={{color: \"red\"}}><ErrorMessage name=\"email\"/></div>\r\n                        </div>\r\n                        <div>\r\n                            <div><label htmlFor=\"password\">Your Password</label></div>\r\n                            <div><Field name=\"password\" type=\"password\"/></div>\r\n                            <div style={{color: \"red\"}}><ErrorMessage name=\"password\"/></div>\r\n                        </div>\r\n                        <div>\r\n                            <div><label htmlFor=\"rememberMe\">Remember Me</label></div>\r\n                            <div><Field name=\"rememberMe\" type=\"checkbox\"/></div>\r\n                        </div>\r\n                        <div style={{height: \"15px\", marginBottom: \"10px\", color: \"red\"}}>\r\n                            {serverError && serverError}\r\n                        </div>\r\n                        <button type=\"submit\">Login</button>\r\n                        <div>\r\n                            <div>Use for email: esh8284@gmail.com</div>\r\n                            <div>Use for pass: hellO28415again</div>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n\r\n            </Formik>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n})\r\n\r\n\r\n/// ---------------------------Old version form --------------------------------///\r\n\r\n// export const FormikSignUp = () => {\r\n//\r\n//     const formik = useFormik({\r\n//         initialValues: {\r\n//             email: \"\",\r\n//             password: \"\",\r\n//             rememberMe: false,\r\n//         },\r\n//         validationSchema: Yup.object({\r\n//             email: Yup.string().email('Invalid email address').required('Email required'),\r\n//             password: Yup.string().min(4, 'Password must be 4 characters but less 10')\r\n//                 .max(10, 'Password must be 4 characters but less 10')\r\n//                 .required('Password required'),\r\n//         }),\r\n//         onSubmit: (values) => {\r\n//             alert(JSON.stringify(values))\r\n//         }\r\n//     })\r\n//\r\n//     return (\r\n//         <form onSubmit={formik.handleSubmit}>\r\n//             <div>\r\n//                 <label htmlFor=\"email\">Email Address</label>\r\n//                 <div>\r\n//                     <input\r\n//                         id=\"email\"\r\n//                         type=\"email\"\r\n//                         {...formik.getFieldProps(\"email\")}\r\n//\r\n//                     />\r\n//                 </div>\r\n//                 {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> :\r\n//                     <div></div>}\r\n//             </div>\r\n//             <div>\r\n//                 <label htmlFor=\"password\">Your Password</label>\r\n//                 <div>\r\n//                     <input\r\n//                         id=\"password\"\r\n//                         type=\"password\"\r\n//                         {...formik.getFieldProps(\"password\")}\r\n//                     />\r\n//                 </div>\r\n//                 {formik.touched.password && formik.errors.password ?\r\n//                     <div style={{color: \"red\"}}>{formik.errors.password}</div> : <div></div>}\r\n//             </div>\r\n//             <div>\r\n//                 <label htmlFor=\"rememberMe\">Remember Me</label>\r\n//                 <div>\r\n//                     <input\r\n//                         id=\"rememberMe\"\r\n//                         type=\"checkBox\"\r\n//                         {...formik.getFieldProps(\"rememberMe\")}\r\n//\r\n//                     />\r\n//                 </div>\r\n//                 <button type=\"submit\">Submit</button>\r\n//             </div>\r\n//         </form>\r\n//     )\r\n// }\r\n\r\n///------------------------------ end old form -----------------------------------///\r\n\r\n\r\n\r\n","export const NotFound = () => {\r\n  return (\r\n    <h1>404: PAGE NOT FOUND</h1>\r\n  )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport stylesModule from \"./Header.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {logOutTC} from \"../../redux/authorization-reducer\";\r\n\r\ntype HeaderPropsType = {\r\n    login: string\r\n    isAuthorized: boolean\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    const dispatch = useDispatch()\r\n    // if (props.isAuthorized) {\r\n    //     return <span>Logout</span>\r\n    // }\r\n    const logoutCallback = () => {\r\n       return dispatch(logOutTC())\r\n\r\n    }\r\n    return (\r\n        <div className={stylesModule.headerContainer}>\r\n            <div className={stylesModule.headerBody}>\r\n                <div className={stylesModule.logo}>\r\n                    Social network\r\n                </div>\r\n                <div>\r\n                    <div>\r\n                        {props.isAuthorized && props.login }\r\n                    </div>\r\n                    <div onClick={logoutCallback} className={stylesModule.loginBlock}>\r\n                        {props.isAuthorized ? <span>Logout</span> : <NavLink to={\"/login\"}>Login</NavLink>}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","\r\nimport React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    login: string\r\n    isAuthorized: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    isAuthorizedUserTC: () => void\r\n}\r\n\r\nexport type HeaderContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props}\r\n                        login={this.props.login}\r\n                        isAuthorized={this.props.isAuthorized}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => ({\r\n    login: state.authorization.login,\r\n    isAuthorized: state.authorization.isAuthorized\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps)\r\n) (HeaderContainer)\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {isAuthorizedUserTC})\r\n// ) (HeaderContainer)\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\"\r\nimport {isAuthorizedUserTC} from \"./authorization-reducer\"\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AllActionsType, RootStateType} from \"./redux-store\";\r\n\r\n\r\nconst initialAppState: InitialAppState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialAppState = initialAppState,\r\n                           action: AppAllActionType): InitialAppState => {\r\n    switch (action.type) {\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppInitialized = () => ({type: \"APP/SET-INITIALIZED\"} as const)\r\n\r\nexport const initializeAppTC = () =>\r\n    (dispatch: ThunkDispatch<RootStateType, unknown, AllActionsType>) => {\r\n    let promise = dispatch(isAuthorizedUserTC())\r\n    Promise.all([promise]).then(() => dispatch(setAppInitialized()))\r\n}\r\n\r\n\r\ntype ThunkType = ThunkAction<void, RootStateType, unknown, AllActionsType>\r\n\r\nexport type AppAllActionType = SetAppInitializedActionType\r\ntype SetAppInitializedActionType = ReturnType<typeof setAppInitialized>\r\n\r\ntype InitialAppState = {\r\n    initialized: boolean\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {Route, Redirect, Switch, withRouter} from 'react-router-dom'\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\"\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport {Login} from \"./components/Login/Login\";\r\nimport {NotFound} from \"./components/commons/NotFound/NotFound\"\r\n\r\n\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport {RootStateType} from \"./redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport { initializeAppTC } from './redux/app-reducer';\r\nimport {SpinnerLoader} from \"./components/commons/SpinnerLoader/SpinnerLoader\";\r\n\r\nclass App extends React.Component<appContainerType> {\r\n    componentDidMount() {\r\n        this.props.initializeAppTC()\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.props.initialized)\r\n        if (!this.props.initialized) {\r\n            return <SpinnerLoader/>\r\n        }\r\n         return (\r\n            <div className=\"app-wrapper\">\r\n                <div className={\"app-header\"}>\r\n                    <HeaderContainer/>\r\n                </div>\r\n\r\n                <div className={\"app-container\"}>\r\n                    <div className={\"app-navbar\"}>\r\n                        <Navbar/>\r\n                    </div>\r\n                    <div className=\"app-wrapper-content\">\r\n\r\n                        {/*<Suspense fallback={<div>Загрузка...</div>}>*/}\r\n                            <Switch>\r\n\r\n                            <Route path={\"/profile\"} render={() => <ProfileContainer/>}/>\r\n                            <Route exact path={\"/\"} render={() => <ProfileContainer/>}/>\r\n                            <Route path={\"/profile/:userId?\"} render={() => <ProfileContainer/>}/>\r\n\r\n                            <Route path={\"/dialogs\"} render={() => <DialogsContainer/>}/>\r\n                            <Route path={\"/users\"} render={() => <UsersContainer/>}/>\r\n                            <Route path={\"/login\"} render={() => <Login/>}/>\r\n                            <Route path={\"/404\"} render={() => <NotFound/>}/>\r\n                            <Redirect from={\"*\"} to={\"/404\"}/>\r\n                        </Switch>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n     initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect (mapStateToProps, {initializeAppTC}),\r\n    withRouter\r\n)(App);\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    initializeAppTC: () => void\r\n}\r\n\r\nexport type appContainerType = MapStateToPropsType & MapDispatchToPropsType","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\nimport {v1} from \"uuid\";\r\nimport {AllActionsType} from \"./redux-store\";\r\n\r\nexport type FriendsType = {\r\n    id: string\r\n    name: string\r\n    sex: string\r\n}\r\n\r\nexport type initialStateSidebarReducerType = {\r\n    friends: Array<FriendsType>\r\n}\r\nlet initialState: initialStateSidebarReducerType = {\r\nfriends: [\r\n    {id: v1(), name: \"Kolya\", sex: \"boy\"},\r\n    {id: v1(), name: \"Ilya\", sex: \"boy\"},\r\n    {id: v1(), name: \"Anya\", sex: \"girl\"},\r\n]\r\n}\r\n\r\nexport const sidebarReducer = (state: initialStateSidebarReducerType = initialState, action: AllActionsType): initialStateSidebarReducerType => {\r\n    return state\r\n}","import {applyMiddleware, createStore, combineReducers} from \"redux\"\r\nimport {ProfileActionsType, profileReducer} from \"./profile-reducer\";\r\nimport {CallbackDialogsType, dialogsReducer, NewDialogsPostType} from \"./dialogs-reducer\";\r\nimport {sidebarReducer} from \"./sidebar-reducer\";\r\nimport {usersReducer, UsersReducerActionType} from \"./users-reducer\";\r\nimport {AuthAllActionType, authorizationReducer} from \"./authorization-reducer\";\r\nimport thunk from 'redux-thunk';\r\nimport {AppAllActionType, appReducer} from \"./app-reducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nexport type AllActionsType = ProfileActionsType\r\n    | NewDialogsPostType\r\n    | CallbackDialogsType\r\n    | UsersReducerActionType\r\n    | AuthAllActionType\r\n    | AppAllActionType\r\n\r\n\r\n\r\n const rootReducer = combineReducers(\r\n     {\r\n         dialogs: dialogsReducer,\r\n         profile: profileReducer,\r\n         sidebarContent: sidebarReducer,\r\n         usersPage: usersReducer,\r\n         authorization: authorizationReducer,\r\n         app: appReducer,\r\n\r\n     }\r\n );\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools(\r\n//     applyMiddleware(thunk),\r\n// ));\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n));\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk)\r\n// )\r\n\r\n\r\n// @ts-ignore\r\n// window.store = store\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./redux/redux-store\"\r\nimport {Provider} from 'react-redux';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3xBF9\",\"navContainer\":\"Navbar_navContainer__12Dmt\",\"allItems\":\"Navbar_allItems__1lrdh\",\"friendsNav\":\"Navbar_friendsNav__32Q2f\",\"item\":\"Navbar_item__3AN-g\",\"active\":\"Navbar_active__1HbNQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_items\":\"Dialogs_dialogs_items__23Eo4\",\"active\":\"Dialogs_active__35SEF\",\"dialog\":\"Dialogs_dialog__2SpMW\",\"all_messages\":\"Dialogs_all_messages__14o2x\",\"dialogs\":\"Dialogs_dialogs__2WV1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__1qmrE\",\"headerBody\":\"Header_headerBody__3logS\",\"loginBlock\":\"Header_loginBlock__yY8WD\",\"logo\":\"Header_logo__2jBO4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__11eh9\",\"post\":\"MyPosts_post__1DUNt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3wagf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginatorWrapper\":\"Paginator_paginatorWrapper__z2bLO\",\"selectedPage\":\"Paginator_selectedPage__1Vi-H\"};"],"sourceRoot":""}